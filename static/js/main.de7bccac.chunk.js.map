{"version":3,"sources":["components/TaskComponent/TaskComponent.jsx","model/TaskModel.js","components/ModalComponent/ModalComponent.jsx","pages/TodoPage/TodoPage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["TaskComponent","tasks","task","idNum","onChecked","onRemove","className","type","checked","done","id","onChange","for","onClick","src","alt","TaskModel","this","ModalComponent","onClose","show","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","TodoPage","useState","setTasks","taskText","setTaskText","filterType","setFilterType","showModal","setShowModal","conIdNum","setConIdNum","taskDone","indexOf","colnedTask","clonedTasks","removeTask","tempTasks","console","log","splice","incompleteTasks","filter","t","length","tasksList","tsk","map","index","Container","Row","value","placeholder","e","target","onKeyDown","key","newTask","concat","addToList","Col","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de7bccac.chunk.js","sourcesContent":["import './TaskComponent.css';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nfunction TaskComponent({ tasks, task, idNum, onChecked, onRemove }) {\r\n\r\n\r\n    \r\n\r\n    // const trashlogo = <><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash-fill\" viewBox=\"0 0 16 16\">\r\n        {/* <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\" /> */}\r\n    {/* </svg></> */}\r\n\r\n    return (\r\n\r\n       <div className=\"c-task-row\">\r\n   \r\n            <div className=\" task-col\">\r\n                <input type=\"checkbox\" checked={task.done} id={\"box-\" + idNum} onChange={() => onChecked(task)} />\r\n            \r\n\r\n                <label for={\"box-\" + idNum} className={task.done ? \"done\" : \"\"}>{task.task} </label>\r\n            </div>\r\n            <div className=\" task-col\">\r\n                <div onClick={()=>onRemove(task)} className=\"cont-trash\"><img src=\"https://img.icons8.com/material-rounded/24/000000/trash.png\" alt=\"\" /></div>\r\n            </div>\r\n           \r\n    </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TaskComponent;","class TaskModel{\r\n    constructor(task,done){\r\n        this.task=task;\r\n        this.done=done;\r\n    }\r\n}\r\n\r\nexport default TaskModel;","import React, { useState } from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nfunction ModalComponent({onRemove,task,onClose,show}) {\r\n\r\n  return (\r\n    <>\r\n     \r\n\r\n      <Modal show={show} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Are you sure you want to remove this {task} ?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={onClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={onRemove}>\r\n            Remove\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default ModalComponent;","import './TodoPage.css'\r\nimport React from 'react';\r\nimport TaskComponent from '../../components/TaskComponent/TaskComponent';\r\nimport { useState } from 'react';\r\nimport TaskModel from '../../model/TaskModel';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport ModalComponent from '../../components/ModalComponent/ModalComponent';\r\n\r\nfunction TodoPage() {\r\n    //all tasks\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const [taskText, setTaskText] = useState(\"\");\r\n  //  const [filteredTasks, setFilteredTasks] = useState([]);\r\n\r\n    const [filterType, setFilterType] = useState(\"All\");\r\n\r\n    //show modal if task not completed\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const [conIdNum, setConIdNum] = useState();\r\n\r\n    function addToList() {\r\n        if (taskText) {\r\n            const newTask = new TaskModel(taskText, false);\r\n            setTasks(tasks.concat(newTask));\r\n            setTaskText(\"\");\r\n\r\n        }\r\n    }\r\n\r\n    // function taskDone(idNum) {\r\n    //     // console.log(idNum);\r\n\r\n    //     let tempTasks = [...tasks];\r\n    //     tempTasks[idNum].done = !tempTasks[idNum].done;\r\n    //     console.log(tempTasks);\r\n    //     setTasks(tempTasks);\r\n\r\n    // }\r\n\r\n    // function taskDone(idNum) {\r\n    //     const colnedTask = { ...tasks[idNum] };\r\n    //     colnedTask.done = !colnedTask.done;\r\n    //     const clonedTasks = [...tasks];\r\n    //     clonedTasks[idNum] = colnedTask;\r\n    //     setTasks(clonedTasks);\r\n      \r\n\r\n    // }\r\n    function taskDone(task) {\r\n        const idNum=tasks.indexOf(task);\r\n        const colnedTask = { ...tasks[idNum] };\r\n        colnedTask.done = !colnedTask.done;\r\n        const clonedTasks = [...tasks];\r\n        clonedTasks[idNum] = colnedTask;\r\n        setTasks(clonedTasks);\r\n    }\r\n\r\n\r\n\r\n\r\n    function removeTask(task) {\r\n        const idNum=tasks.indexOf(task);\r\n        let tempTasks = [...tasks];\r\n        if (tempTasks[idNum].done === false) {\r\n\r\n            setShowModal(true);\r\n            setConIdNum(idNum);\r\n            console.log(\"in remove\");\r\n        }\r\n        else {\r\n            tempTasks.splice(idNum, 1);\r\n            setTasks(tempTasks);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //Add tasks by press in 'Enter' key\r\n    function handleKeyDown(e) {\r\n        if (e.key === 'Enter') {\r\n            console.log('do validate');\r\n            addToList();\r\n        }\r\n    }\r\n\r\n    //show incomplete tasks\r\n    const incompleteTasks = tasks.filter(t => t.done === false).length;\r\n\r\n\r\n    //let filterType =\"All\"\r\n\r\n    //function for filter tasks \r\n\r\n\r\n\r\n    function filterTask() {\r\n        if (filterType === \"Completed\") {\r\n            // const doneTasks = tasks.filter(t => t.done);\r\n            // return doneTasks.map((tsk, index) => (\r\n            // <TaskComponent tasks={doneTasks} task={tsk} idNum={index} onChecked={taskDone} onRemove={removeTask} />)\r\n            // )\r\n            return tasks.filter(tsk => tsk.done).map((tsk,index) => <TaskComponent tasks={tasks} task={tsk} idNum={index} onChecked={taskDone} onRemove={removeTask} />)\r\n\r\n        } else if (filterType === \"Active\") {\r\n            // const active = tasks.filter(t => !t.done);\r\n            // console.log(active);\r\n\r\n            // return active.map((tsk, index) => (\r\n                // <TaskComponent tasks={active} task={tsk} idNum={index} onChecked={taskDone} onRemove={removeTask} />)\r\n            // )\r\n            return tasks.filter(tsk =>!tsk.done).map((tsk,index) => <TaskComponent tasks={tasks} task={tsk} idNum={index} onChecked={taskDone} onRemove={removeTask} />)\r\n\r\n\r\n        } else {\r\n\r\n            return tasks.map((tsk, index) => (\r\n                <TaskComponent tasks={tasks} task={tsk} idNum={index} onChecked={taskDone} onRemove={removeTask} />)\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    const tasksList = filterTask();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //  console.log(filterType);\r\n    return (\r\n        <div className=\"c-todopage\">\r\n            <Container >\r\n                <h1>Todo List</h1>\r\n                <Row >\r\n\r\n                    <input className=\"input-task\" type=\"text\" value={taskText} placeholder=\"Enter new Task\" onChange={e => setTaskText(e.target.value)} onKeyDown={handleKeyDown} />\r\n\r\n                    <Col>\r\n                        <div className={filterType === \"All\" ? \"m-press\" : \"\" + \" my-btn \"} onClick={() => setFilterType(\"All\")}\r\n\r\n                        >All</div>\r\n\r\n                    </Col>\r\n                    <Col>\r\n                        <div className={filterType === \"Active\" ? \"m-press\" : \"\" + \" my-btn \"} onClick={() => setFilterType(\"Active\")}>Active</div>\r\n                    </Col>\r\n                    <Col>\r\n                        <div className={filterType === \"Completed\" ? \"m-press\" : \"\" + \" my-btn \"} onClick={() => setFilterType(\"Completed\")}>Completed</div>\r\n                    </Col>\r\n\r\n                    {incompleteTasks > 0 ? <p className=\"coun-tasks\">{incompleteTasks} items left</p> : <p className=\"coun-tasks\">No tasks to do</p>}\r\n                </Row>\r\n                {/* {filteredTasks} */}\r\n                {tasksList}\r\n                <ModalComponent show={showModal} onClose={() => setShowModal(false)}\r\n                    onRemove={() => {\r\n                        let tempTasks = [...tasks];\r\n                        tempTasks.splice(conIdNum, 1);\r\n                        setTasks(tempTasks);\r\n                        setShowModal(false);\r\n                    }} />\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoPage;","import './App.css';\nimport TaskComponent from './components/TaskComponent/TaskComponent';\nimport TodoPage from './pages/TodoPage/TodoPage';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <TodoPage />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}